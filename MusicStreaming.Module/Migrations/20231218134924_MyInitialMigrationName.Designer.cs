// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicStreaming.Module.BusinessObjects;

#nullable disable

namespace MusicStreaming.Module.Migrations
{
    [DbContext(typeof(MusicStreamingEFCoreDbContext))]
    [Migration("20231218134924_MyInitialMigrationName")]
    partial class MyInitialMigrationName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Proxies:ChangeTracking", true)
                .HasAnnotation("Proxies:CheckEquality", true)
                .HasAnnotation("Proxies:LazyLoading", false)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MusicStreaming.Module.BusinessObjects.Album", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArtistID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ArtistID");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("MusicStreaming.Module.BusinessObjects.Artist", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biography")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("MusicStreaming.Module.BusinessObjects.Playlist", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("MusicStreaming.Module.BusinessObjects.Song", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AlbumID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AlbumID");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("MusicStreaming.Module.BusinessObjects.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PlaylistSong", b =>
                {
                    b.Property<Guid>("PlaylistsID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SongsID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlaylistsID", "SongsID");

                    b.HasIndex("SongsID");

                    b.ToTable("PlaylistSong");
                });

            modelBuilder.Entity("PlaylistUser", b =>
                {
                    b.Property<Guid>("FollowedPlaylistsID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowersID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FollowedPlaylistsID", "FollowersID");

                    b.HasIndex("FollowersID");

                    b.ToTable("PlaylistUser");
                });

            modelBuilder.Entity("MusicStreaming.Module.BusinessObjects.Album", b =>
                {
                    b.HasOne("MusicStreaming.Module.BusinessObjects.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistID");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MusicStreaming.Module.BusinessObjects.Playlist", b =>
                {
                    b.HasOne("MusicStreaming.Module.BusinessObjects.User", "CreatedBy")
                        .WithMany("CreatedPlaylists")
                        .HasForeignKey("CreatedByID");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("MusicStreaming.Module.BusinessObjects.Song", b =>
                {
                    b.HasOne("MusicStreaming.Module.BusinessObjects.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumID");

                    b.Navigation("Album");
                });

            modelBuilder.Entity("PlaylistSong", b =>
                {
                    b.HasOne("MusicStreaming.Module.BusinessObjects.Playlist", null)
                        .WithMany()
                        .HasForeignKey("PlaylistsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicStreaming.Module.BusinessObjects.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlaylistUser", b =>
                {
                    b.HasOne("MusicStreaming.Module.BusinessObjects.Playlist", null)
                        .WithMany()
                        .HasForeignKey("FollowedPlaylistsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicStreaming.Module.BusinessObjects.User", null)
                        .WithMany()
                        .HasForeignKey("FollowersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicStreaming.Module.BusinessObjects.Album", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("MusicStreaming.Module.BusinessObjects.Artist", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("MusicStreaming.Module.BusinessObjects.User", b =>
                {
                    b.Navigation("CreatedPlaylists");
                });
#pragma warning restore 612, 618
        }
    }
}
